//19)To implement producer / consumer problem through multithreading which will demonstrate following concepts:
Critical Section of threads
Race conditions 
Resource Allocation
Thread communication
Thread Priority
Thread synchronization by ‘block’ and ‘method’
import java.io.*;
import java.util.*;
import java.util.LinkedList;

public class ProducerConsumerDemo {

    public static void main(String[] args) {

        final PC pc = new PC();

        // create producer thread
        Thread t1 = new Thread(new Runnable() {
            @Override
            public void run() {
                pc.produce();
            }
        });

        // create consumer thread
        Thread t2 = new Thread(new Runnable() {
            @Override
            public void run() {
                pc.consume();
            }
        });

        // set thread priority
        t1.setPriority(Thread.MIN_PRIORITY);
        t2.setPriority(Thread.MAX_PRIORITY);

        // start both threads
        t1.start();
        t2.start();

        // wait for both threads to finish
        try {
            t1.join();
            t2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

    }

    // PC (producer-consumer) class
    public static class PC {
        LinkedList<Integer> list = new LinkedList<>();
        int capacity = 2;

        // producer thread
        public void produce() {
            int value = 0;
            while (true) {
                synchronized (this) {
                    // wait if buffer is full
                    while (list.size() == capacity) {
                        try {
                            System.out.println("Buffer is full. Waiting for consumer to consume.");
                            wait();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    System.out.println("Producer produced: " + value);
                    // add value to buffer
                    list.add(value++);
                    // notify consumer
                    notify();
                }
            }
        }

        // consumer thread
        public void consume() {
            while (true) {
                synchronized (this) {
                    // wait if buffer is empty
                    while (list.size() == 0) {
                        try {
                            System.out.println("Buffer is empty. Waiting for producer to produce.");
                            wait();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    // remove value from buffer
                    int value = list.removeFirst();
                    System.out.println("Consumer consumed: " + value);
                    // notify producer
                    notify();
                }
            }
        }
    }

}

